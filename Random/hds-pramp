H-Tree Construction
We will start from the center point. Compute the coordinates of the 4 tips of the H. Then we shall draw the 3 line segments of the H, i.e. left and right vertical of the H, and the connection of the two vertical segments. We will update the length and recursively draw 4 half-size H-trees of order one less than the current depth.

Pseudocode:

function drawLine(x1, y1, x2, y2):
    # draws line, assume implementation available

function drawHTree(x, y, length, depth):
    # recursion base case
    if (depth == 0):
        return

    x0 = x - length/2
    x1 = x + length/2
    y0 = y - length/2
    y1 = y + length/2

    # draw the 3 line segments of the H-Tree
    drawLine(x0, y0, x0, y1)    # left segment
    drawLine(x1, y0, x1, y1)    # right segment
    drawLine(x0,  y, x1,  y)    # connecting segment

    # at each stage, the length of segments decreases by a factor of √2
    newLength = length/√2

    # decrement depth by 1 and draw an H-tree
    # at each of the tips of the current ‘H’
    drawHTree(x0, y0, newLength, depth-1)     # lower left  H-tree
    drawHTree(x0, y1, newLength, depth-1)     # upper left  H-tree
    drawHTree(x1, y0, newLength, depth-1)     # lower right H-tree
    drawHTree(x1, y1, newLength, depth-1)     # upper right H-tree

Time Complexity: every call of drawHTree invokes 9 expressions whose time complexity is O(1) and 4 calls of drawHTree until depth (denoted here as D) reaches to 0. Therefore: T(D) = 9 + 4 * T(D-1), where T is the time complexity function and D is the depth of the H-Tree. Now, if we expand T(D-1) recursively all the way to T(0), it’ll be easy to see that T(D) = O(4^D).

Space Complexity: recursive calls add overhead since we store them in the execution stack. The space occupied in the stack will be then O(D), in the worst case scenario. The stack space occupied will be no more than O(D) at any given point since a sibling drawHTree will not be called before the current one being executed returns (i.e. finishes its execution).
